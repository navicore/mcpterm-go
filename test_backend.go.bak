package main

import (
	"context"
	"fmt"
	"os"
	"time"

	"github.com/navicore/mcpterm-go/pkg/backend"
)

func main() {
	// Create backend configuration
	// Get AWS credentials from environment
	accessKey := os.Getenv("AWS_ACCESS_KEY_ID")
	secretKey := os.Getenv("AWS_SECRET_ACCESS_KEY")

	if accessKey == "" || secretKey == "" {
		fmt.Println("Warning: AWS credentials not found in environment variables.")
		fmt.Println("Using default credential provider chain.")
	} else {
		fmt.Println("Using explicit AWS credentials from environment.")
	}

	config := backend.Config{
		Type:        backend.BackendAWSBedrock,
		ModelID:     "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
		MaxTokens:   1000,
		Temperature: 0.7,
		Options: map[string]any{
			"region":     "us-west-2",
			"access_key": accessKey,
			"secret_key": secretKey,
		},
	}

	// Create backend
	be, err := backend.NewBackend(config)
	if err != nil {
		fmt.Printf("Failed to create backend: %v\n", err)
		os.Exit(1)
	}

	// Create request
	req := backend.ChatRequest{
		Messages: []backend.Message{
			{Role: "user", Content: "Hello, can you hear me?"},
		},
		MaxTokens:   100,
		Temperature: 0.7,
	}

	// Create timeout context with a longer timeout
	ctx, cancel := context.WithTimeout(context.Background(), 120*time.Second)
	defer cancel()

	fmt.Println("Sending message to backend...")
	
	// Send message
	resp, err := be.SendMessage(ctx, req)
	if err != nil {
		fmt.Printf("Error sending message: %v\n", err)
		os.Exit(1)
	}

	fmt.Println("Response received!")
	fmt.Printf("Content: %s\n", resp.Content)
	fmt.Printf("Finish reason: %s\n", resp.FinishReason)
	fmt.Printf("Token usage: %v\n", resp.Usage)
}