package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/bedrockruntime"
)

type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type AnthropicRequest struct {
	AnthropicVersion string    `json:"anthropic_version"`
	Messages         []Message `json:"messages"`
	MaxTokens        int       `json:"max_tokens"`
	Temperature      float64   `json:"temperature,omitempty"`
}

func main() {
	ctx := context.Background()
	region := "us-west-2"
	// Note: this needs to match the exact model ID including region prefix
	modelID := "us.anthropic.claude-3-7-sonnet-20250219-v1:0"

	// Load AWS configuration
	cfg, err := config.LoadDefaultConfig(ctx, 
		config.WithRegion(region),
		config.WithRetryMaxAttempts(3),
	)
	if err != nil {
		fmt.Printf("Failed to load AWS config: %v\n", err)
		os.Exit(1)
	}

	// Create Bedrock client
	client := bedrockruntime.NewFromConfig(cfg)

	// Create request payload
	request := AnthropicRequest{
		AnthropicVersion: "bedrock-2023-05-31",
		Messages: []Message{
			{Role: "user", Content: "Hello, can you hear me?"},
		},
		MaxTokens:   100,
		Temperature: 0.5,
	}

	// Marshal to JSON
	requestJSON, err := json.Marshal(request)
	if err != nil {
		fmt.Printf("Failed to marshal request: %v\n", err)
		os.Exit(1)
	}

	// Create API request
	bedrockRequest := &bedrockruntime.InvokeModelInput{
		ModelId:     aws.String(modelID),
		ContentType: aws.String("application/json"),
		Accept:      aws.String("application/json"),
		Body:        requestJSON,
	}

	// Set timeout
	timeoutCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()

	fmt.Println("Sending request to Bedrock...")
	fmt.Printf("Request: %s\n", string(requestJSON))

	// Call API
	response, err := client.InvokeModel(timeoutCtx, bedrockRequest)
	if err != nil {
		fmt.Printf("Error calling Bedrock: %v\n", err)
		os.Exit(1)
	}

	fmt.Println("Response received!")
	fmt.Println(string(response.Body))
}