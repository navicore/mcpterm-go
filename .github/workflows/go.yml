name: Go CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        check-latest: true

    - name: Setup custom GOPATH for project
      run: |
        mkdir -p $HOME/go/src/mcpterm-go
        cp -r $GITHUB_WORKSPACE/* $HOME/go/src/mcpterm-go/
        cd $HOME/go/src/mcpterm-go
        go mod tidy

    - name: Build
      working-directory: ${{ env.GOPATH }}/src/mcpterm-go
      run: go build -v ./...
      env:
        GOPATH: ${{ runner.home }}/go

    - name: Test
      working-directory: ${{ env.GOPATH }}/src/mcpterm-go
      run: go test -v ./...
      env:
        GOPATH: ${{ runner.home }}/go

    - name: Vet
      working-directory: ${{ env.GOPATH }}/src/mcpterm-go
      run: go vet ./...
      env:
        GOPATH: ${{ runner.home }}/go

    - name: Formatting check
      working-directory: ${{ env.GOPATH }}/src/mcpterm-go
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          gofmt -s -l .
          echo "The above files are not properly formatted. Please run 'go fmt ./...'"
          exit 1
        fi
      env:
        GOPATH: ${{ runner.home }}/go

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        check-latest: true

    - name: Setup custom GOPATH for project
      run: |
        mkdir -p $HOME/go/src/mcpterm-go
        cp -r $GITHUB_WORKSPACE/* $HOME/go/src/mcpterm-go/
        cd $HOME/go/src/mcpterm-go
        go mod tidy

    - name: Install golangci-lint
      run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Lint
      working-directory: ${{ env.GOPATH }}/src/mcpterm-go
      run: golangci-lint run --timeout=5m
      env:
        GOPATH: ${{ runner.home }}/go